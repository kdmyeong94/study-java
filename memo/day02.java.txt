
 1. 변수
	1-1. 값의 할당 방법
		- 생성된 변수는 다른 변수에 대입 될 수 있다.
		
		int num1 = 100; 
		int num2 = num1;

	1-2. 변수 사용의 제약
		- 반복하여 다른 값이 할당 될 수 있지만, 선언은 중복 불가
		
		int num1 = 100;
		num1 = 200;
		int num1 = 300; // x 이미 선언된 변수이므로 에러
	
		- 선언되지 않은 변수는 사용 할 수 없다.
		
		int num1 = 100;
		num1 = 200;
		num2 = 300;  // x 선언되지 않은 변수이므로 에러

		- 값이 대입되지 않은 변수는 다른 변수에 대입하거나 출력 할 수 없다.
	
		int num1; 
		int num2 = num1;   // x 할당되지 않은 변수를 대입하였으므로 에러
		System.out.println( num1);   // x  할당되지 않은 변수를 출력하였으므로 에러		

 2. 상수
	2-1. 상수 = 변하지 않는 수
		- 변수와 마찬가지로 메모리상에 존재하지만, 값이 변경 될 수 없는 데이터
		- final 키워드를 사용하여 선언된 변수는 상수로 생성된다.

		final int age = 20;
		final float PI = 3.14F;

		- 메모리 상에 이름이 생성되므로 접근은 가능하지만, 할당한 값을 변경할 수는 없다.(읽기 전용)

		final int age = 20;
		age = 21;   // x 상수의 값을 변경하므로 에러

 3. 연산자
	3-1. 연산자란
		- 프로그램에서 연산을 수행하기 위하여 사용되는 특수 기호들

	3-2. 종류
		- 대입연산자
			: 변수에 숫자나 문자열 등의 자료를 입력하거나 연산 결과를 다른 변수에 할당한다.
		- 사칙연산자
			: 더하기 + , 빼기 - , 곱하기 * , 나눗셈의 몫 / , 나눗셈의 나머지 %
		- 단항연산자
			: 변수에 대한 연산 결과를 다시 자기 자신에게 적용하는 경우 사용한다.
		- 증감연산자
			: 특정 변수에 저장되어 있는 값을 1씩 증가, 감소 시킬 경우 사용한다.
		- 비교연산자
			: 두개의 변수 값 간의 관계를 비교하여 참(true), 거짓(false)의 결과를 반환한다.
		- 논리연산자
			: 좌변과 우변을 논리연산하고, 참일때는 true, 거짓일때는 false 값을 반환한다.


	3-3. 사칙연산자
		- 일반적인 덧셈(+), 뺄셈(-), 곱셈 (*), 나눗셈(/,%)을 수행한다.
		- 사칙연산의 결과는 대입연산자를 통하여 다른 변수에 대입 될 수 있다.
		- 정수(byte, short, int, long)와 실수(float, double)의 연산시에는 정수가 실수 형태로 자동 변환되어 처리되기 때문에, 결과는 실수가 된다.

	3-4 나눗셈에 있어서의 주의사항
		- 10 나누기 3을 계산 할 때, 수학에서는 몫이 3, 나머지가 1 이라고 계산되지만, java에서는 나눗셈에 대해 두 개의 연산자로 구분된다.

		-> 10/3 : 몫만을 취하여 결과 값은 "3"
		-> 10%3 : 나머지만을 취하여 결과값은 "1"이 된다.

		- 프로그램에서의 연산은 2진수로 변환되어 이루어진다. 실수는 2진수로의 변환이 되지 않기 때문에, 실수의 나눗셈은 오차가 발생한다.
		- 모든 수는 0으로 나눌 수 없다.

	3-5. 단항 연산자
		- 어떤 변수(x)의 값에 대한 계산 결과를 다시 자기 자신에게 대입하고자 하는 경우의 약식 표현이다.

		int x= 100;
		x = x + 5;	// 105
		x += 5; 		// 105

		- 단항 연산자는 모든 사칙 연산자에 표현 가능하다.
		+=, -=, *=, /=, %=


	3-6. 증감 연산자
		- 단항 연산자로 표현 할 수 있는 식에서 계산 대상 값이 1인경우, 덧셈과 뺄셈에 대해서는 다시 한번 축약 할 수 있다.
		- 덧셈의 경우
			x = x + 1; < 단항연산자
			x += 1;	<단항 연산자
			x++; < 증감연산자
			++x; < 증감연산자

		- 뺄셈의 경우
			x =x - 1;  < 단항연산자 
			x -= 1;	< 단항연산자
			x--; < 증감연산자
			--x; < 증감연산자
		
	3-7. "x++"와 "++x"의 차이
		- 증감연산자의 표시 위치에 따라 결과가 서로 다르게 적용된다.
		- x++ : 증감연산자가 뒤에 표시되는 경우, 현재 x의 값을 먼저 수식에 적용하고 나중에 x에 대한 1증가를 처리한다.
		
		int a = 100;
		int x = 1;
		int y = a + x++;
		    y = 100 + 1;이 먼저 계산된다.
		    y에 101이라는 값이 대입 된 후에 x++가 계산된다.
		결과 :  y = 101 , x = 2


		- ++x : 증감연산자가 앞에 표시되는 경우 먼저 현재 x의 값을 1증가 시킨 후, 그 결과를 수식에 적용한다.
		
		int a = 100;
		int x = 1;
		int y = a + ++x;
		++x가 먼저 계산되므로 x는 2가 된다.
		y = 100 + 2;

 4. 비교연산자
	4-1. 비교연산자
		- 같다(==), 다르다(!=) , 초과( >), 이상 (>=) , 미만 (<), 이하 (<=)
		- 주어진 식이 참인지 거짓인지만 판별 가능하므로, 연산 결과는 boolean 값으로 생성된다.

 		int x = 100;
		int y = 1;
		boolean r = x 비교연산자 y;

 5. 논리연산자
	5-1. 논리연산자
		- 두개 이상의 비교연산자의 결과나 boolean 값에 대해 추가로 "AND나 "OR"연산을  수행하여 결과를 얻는다.

	5-2. AND의 의미를 갖는 &&
		- "&&"연산자는 두 개의 boolean 값을 비교하여 모두 true인 경우에 결과값이 true가 된다.

	5-3. OR의미를 갖는 ||
		- "||"연산자는 두 개의 boolean 값을 비교하여 둘 중 하나라도 true인 경우 결과가 true 이다.

-------------------------------------------------------------

 6. 형변환(casting)
	6-1. 형변환
		- 변수의 자료형이 변환되는 것을 의미한다.
		- 특정 자료형의 값을 다른 자료형의 변수에 대입 할 수 있다.
		- 암묵적 형변환과 명시적 형변환의 두 종류가 있다.
	
	6-2. 암묵적 형변환
		- 서로 다른 자료형을 연산 혹은 대입하는 경우, java컴파일러가 자료형을 통일한다.
		- 이 과정에서 발생하는 형변환을 암묵적 형변환이라고 한다.

		int a = 100;  // 정수형
		float b = a;  // 정수형을 실수형에 대입
		-> 암묵적 형변환은 어떤 변수가 더 큰 범위의 변수로 대입가능함을 의미

	6-3. 암묵적 형변환이 허용되는 범위
		- 암묵적 형변환은 데이터의 손실이 발생하지 않는 범위 내에서만 이루어진다.
		
	6-4. 암묵적 형변환
		- 암묵적 형변

	6-5. 명시적 형변환
		- 데이터의 손실을 감수하더라도, 강제로 형변환 시키는 형태

		자료형 b = (변환할 자료형)a;

		- 실수형을 정수형으로 변환하는 경우, 소수점 이하 자리는 버려진다.

		double a = 3.14d;
		int b = (int)a; // 결과는 3

 7. 조건문
	7-1. 조건문이란
		- 무조건 실행되는 것이 아니라, 특정 조건을 충족할 경우에만 실행되는 구문
	
	7-2. 조건문의 종류
		- if문 		: 주어진 조건이 참 (true)일 경우에만 실행된다.

		- if~else문 	: 주어진 조건이 참 (true)일 경우 if문이 실행되고, 그렇지 않을 경우 else 문이 실행된다.

		- if~else if~else 문 : 조건을 여러개로 세분화하여 사용하는 if문이다.

		- switch 문	: 하나의 '값'에 대하여 여러가지 경우의 수로 나누어 분기한다.

	7-3. if문
		- if문은 주어진 조건이 참일 경우에 지정된 구문이 실행된다.
	
			if( 조건) {
			    ..구문..
			}

		- if 문의 조건식
			> boolean
			> 비교식
			> 논리식

	7-4.  그렇지 않다면?
		- if문이 조건이 참일 경우에 실행되는 구문이라면, if문의 조건과 반대되는 경우에 실행되는 구문이 else문이다.
		- else 문은 독립적으로 실행 될 수 없고, 반드시 if문 뒤에 위치해야 한다.

		if(조건){
		   ..구문...
		}else{
		  ...반대 경우에 실행할 구문...
		}

	7-5. 여러 가지 경우의 수를 분기
		- if문과 else 문 사이에 else if 문으로 두 번째 조건, 세 번째 조건을 나열 할 수 있다.
		- else if 문은 필요한 만큼 나열 할 수 있으며, 필요치 않을 경우 else 문은 생략 가능하다.
		
		if ( 1차조건 ) {
		  ...구문...
		} else if (2차 조건) {
			...구문...
		} else if (n차 조건) {
			...구문...
		} else {
			...반대 경우에 실행할 구문
		}
		
	7-6. 변수 값에 대한 경우의 수를 처리하는 switch 문
		- switch 문은 하나의 변수(기준값)에 대한 여러가지 case를 정의하는 구문이다.
		- if문은 조건에 식(비교식, 부등식)이 사용 될 수 있지만, switch문은 분기 조건이 반드시 일치하는 "값"에 대해서만 처리 가능하다.
		
		switch( 기준값) {
		case 값1:
			...실행할 구문...
			break;
		case 값n:
			...실행할 구문...
			break;
		default :
			...모든 경우에 충족되지 않을 경우 실행될 기본 문구...
			braek;
		}

		

 