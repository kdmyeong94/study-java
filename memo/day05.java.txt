
 1. 배열의 종류
   1-1. 1차 배열
	- 앞에서 살펴본 배열처럼 한 줄만 존재하는 사물함 같이 구성된 배열
	- 행에 대한 개념이 없고, 열에 대한 개념만 존재하기 때문에 "배열이름.length"는 몇 칸인지를 알아보는 기능이 된다.
 
   2-2. 2차 배열
	- 1차 배열의 각 칸에 새로운 배열을 넣는 형태
	- 1차 배열의 각 칸은 행이 되고, 각각의 칸에 추가된 개별적인 배열이 열의 개념이 되어 "행렬"을 구성하게 된다.

 2. 2차원 배열
  2-1. 2차원 배열의 선언
	- 데이터 타입의 이름 뒤에 대괄호 "[]" 를 행과 열에 대하여 각각 지정한다.

	 데이터형[][] 배열이름;
  2-2. 2차원 배별의 크기 할당
	- 행과 열에 대한 크기를 명시한다.

	 배열이름 = new 데이터형[행][열];

  2-3. 2차원 배열의 선언과 할당의 일괄처리
	
	 데이터형[][]배열이름 = new 데이터형[행][열];

  2-4. 2차원 배열의 선언, 크기 할당, 값의 대입에 대한 일괄처리
	- 2차원 배열의 경우 블록 괄호'{}'를 2중으로 겹쳐서 2차원 배열을 표현한다.
	- 행과 열의 구분에는 콤마(,)가 사용된다.
	- 컴파일러가 블록괄호 '{}'의 요소를 파악하면 행,열의 크기가 산출될 수 있으므로 배열의 크기 설정을 위한 [][]에는 배열의 크기를 명시하지 않는다.
	
	데이터형[][] 배열이름 = new 데이터형[][]{
	 {1행0열의 값, 1행 1열의값, ...., 1행 n열의 값},
	 {2행0열의 값, 2행 1열의값, ...., 2행 n열의 값},
	 {3행0열의 값, 3행 1열의값, ...., 3행 n열의 값},
	};

  2-5. 2차원 배열에 대한 값의 대입 방법
	- 행,열에 대한 인덱스를 통하여 값을 대입한다.

	 배열이름[행][열] = 값;

	- 일괄지정
	 
	 int[][] grade = new int[][]{
	  {75,82,91}, {88,64,50}, {100,100,90}
	}

 2-6. 2차원 배열의 길이
	- 2차원 배열의 길이는 행에 대한 측면과 열에 대한 측면을 나누어 생각해야 한다.
	- 행의 길이
	  1차 배열의 길이는 2차 배열에서는 행의 크기로 조회된다.
	 int rows = grade.length;
	
	- 열의 길이
	 열의 길이는 각 행에 대하여 개별적으로 조회해야 한다.
	 int cols = grade[행].length;

 
 3. 메서드
	- public static void main(String[] args){ }
	- f(x) = x + 1
 	 f(2) = 3
	 f(4) = 5

 3-1. 프로그램의 함수 = 메서드
 	- 특정 기능(=연산)을 그룹화 해서 재사용하기 위한 단위

	 public static void 메서드이름() {
		...수행할 연산식...
	 }

 3-2. 메서드의 호출
	- 정의된 메서드는 다른 메서드를 구성하는 {...}안에서 다음의 형식으로 사용 될 수 있으며, 이를 메서드를 호출한다고 한다.

	메서드이름();

 3-3. 메서드 파라미터
	- Java 프로그램의 메서드(=함수)는 자신이 실행되는데 필요한 조건값을 메서드 이름 뒤에 괄호 안에서 변수 형태로 선언한다. 이를 메서드 파라미터 라고 한다.

	 public static void 메서드이름(변수형 변수이름){

	}

 3-4. 다중 파라미터
	- 메서드가 연산을 수행하는데 두 개 이상의 파라미터가 필요하다면 콤마(,)로 구분해서 선언 할 수 있다.
	
	public static void 메서드이름(변수형 변수이름, 변수형 변수이름, ...){
		...
	}

 3-5. 파라미터를 갖는 메서드의 호출
	- 메서드를 정의하면서 파라미터가 명시되어 있다면 해당 메서드를 호출하면서 파라미터를 전달 해 주어야 한다.

	 public static void 메서드이름(변수형 변수이름, 변수형 변수이름){
		...
	}
	
	 메서드이름(값1, 값2);





