1. 프로그래밍 언어
	1-1. 프로그래밍 언어란?
		- 프로그래밍 언어란 주어진 어떤 문제를 해결하기 위해 인간과 컴퓨터 사이에서 의사소통을 가능케 하는 인공적인 언어이다.
		- 이 언어를 통하여 사용자는 컴퓨터에게 일련의 일을 시키는 명령어들의 집합체인 프로그램을 작성 할 수 있다.

	1-2. 프로그래밍 언어의 종류
		- 기계어 : 컴퓨터가 이해하는 언어로서 2진수의 집합으로 구성되어 있다.
		- 고급언어 : 사람이 이해 할 수 있는 수준의 언어. 기계어로 변환되어야만 프로그램 형태로 실행 하는 것이 가능하다.

	1-3. java언어
		- 운영체제(OS)에 독립적
			: JVM이 설치된 환경이라면 어디서든지 실행가능함.
		- 객체지향 언어
			: 상속, 캡슐화, 다형성
			: 코드의 재사용 및 유지보수에 용이함
		- 자동 메모리 관리
			: Garbage Collector가 자동으로 메모리를 관리해준다.
		- 네트워크, 분산처리, 멀티스레드
			: 시스템과 관계없이 네트워크, 분산처리, 멀티 스레드 구현을 위한 손쉬운 API제공

	1-4. java 프로그램이 만들어지는 과정
		- *.java	->			class파일
			변환(컴파일/compile)	*.class
			컴파일러(compiler)

	1-5 JVM : 자바 가상 머신 (Java Virtual Machine)
		- 컴파일된 자바 바이트 코드를 실행시켜 주는 소프트웨어
		- 자바 프로그램은 JVM이 설치된 환경이라면 운영체제나 하드웨어에 종속되지 않고 실행이 가능하다.
		- 운영체제로부터 독립적
		- 각 운영체제에 맞는 JVM이 설치된 환경이라면, 하나의 프로그램이 실행 환경의 영향을 받지 않고, 동일하게 실행 될 수 있다.
		

 2. 자바 설치
	2-1. 자바설치여부
		- winkey + r : 실행  > cmd 실행
		- jav - version : 자바 설치 여부 확인
		- exit :창닫기
	2-2. 자바설치
		- https://oracle.com
	2-3. 이클립스
		- 단축키
		- Ctrl + Shift + +	: 글자크게
		- Ctrl + Shift + -	: 글자 작게
		- Ctrl + d 	: 한 줄 삭제
		- Ctrl + z		: 작업물 되돌리기
		- Ctrl + y		: Ctrl + z 했던 작업물 되돌리기
		- Ctrl + F11 	: 실행
		- Ctrl + M 	: 전체 화면

	2-4. 주석문이란?
		- 프로그램 소스코드 안에 개발자의 필요에 따라 명시하는 설명문
		- 주석문은 프로그램으로 컴파일 되지 않는다.
		- 특정 명령문이 실행되지 않도록 차단하는 용도로 사용 할 수 있다.
	2-5. 주석문의 종류
		- 한 줄만 처리하는 주석문	: //
		- 여러 줄을 처리하는 주석문	: /*     
						이 블록 안에서는 여러 라인을 주석으로 처리 할 수 있다.
					 */



 3. 변수의 이해
	3-1. 변수의 이해
		- 다양한 종류의 자료를 표현 할 수 있는 값을 변수라고 부르며, 일반적으로 웹페이지에서 처리하고자 하는 "데이터"에 해당한다.
	
	3-2. 자료형 (data type)
		- 프로그래밍 언어에서 변수의 종류를 구별하기 위해 사용되는 키워드
		- 자바에서 제공되는 자료형의 종류에는 8가지가 있으며,	이를 기본 데이터타입이라 한다.

	3-3. 자료형이 가지는 의미
		- 모든 변수는 컴퓨터의 메모리 영역에 생성된다.
		- 일반적으로 메모리란, PC에서 RAM을 의미한다.
		- 4byte의 크기를 갖는 변수값 하나를 생성할 경우, PC의 RAM에서 해당 용량만큼을 사용하게 된다.
		- 변수는 RAM의 크기를 넘어가지 않는 범위 안에서만 생성 할 수 있다. (용량을 넘어서는 경우는 에러가 발생, OutOfMemory 에러발생)
	
	3-4. 문자열 데이터
		- 프로그램에서 "문장"을 표현하기 위해 사용되는 데이터 값
		- String 
			- 문자열을 포현하기 위한 자료형이다.(첫글자 대문자 주의)
			- 글자 수에 상관 없이 쌍따옴표("")로 묶인 내용을 할당 할 수 있다.
			- 숫자값의 경우 쌍따옴표로 묶이게 되면 문자열로 취급되므로, 숫자와 문자열을 분명하게 구별해야 한다.
		
	3-5. 변수의 사용 방법
		- 변수를 사용하는 방법은 "선언"과 "할당"의 두 영역으로 구분된다.
		- 변수의 선언
			- 선언은 데이터 형과 사용하고자 하는 변수의 이름을 지정한 후, 세미콜론(;)으로 한 라인을 종료한다.
		>> 데이터형 변수이름;
		   ex) int num1;
		        int num2;

		- 변수의 할당
			- 선언된 변수에 원하는 값을 대입하는 과정을 의미한다.
			 값의 대입은 대입연산자(=)를 사용하며, 우변에서 좌변으로 대입된다.

		>> 변수이름 = 값;
		ex)  num1 = 10;
		     num2 = 20;		

		- 변수의 선언과 할당의 통합
		>> 데이터형 변수이름 = 값;
		ex) int num1 = 100;
		    int num2 = 200;

	3-6. 문자열 데이터
		- String 형의 변수를 선언하고, 쌍 따옴표로 묶인 값을 대입한다.
		- 빈 문자열이나 공백도 문자열 데이터이다.
		ex) String msg = "안녕하세요.	자바"; // 문장을 표현 공백 포함
		String blank = " "; // 빈 문자열 값
		String age = "20"; // 숫자값이 쌍따옴표로 묶였다면 문자열이다.

	3-7 문자열 데이터의 덧셈
		- 문자열 + 문자열 : 두 문장을 하나로 합쳐준다.
			String language = "JA" + "VA";  // "JAVA"

		- 문자열 + 기본자료형 : 
			int age = 20;
			String name = "자바학생";
			String result = name + age; // "자바학생" + "20" -> "자바학생" + "20"
						// -> "자바학생20"

	3-8. 변수 이름 명명규칙
		- 변수 이름은 영문, 숫자, "_", "$" 만 사용 가능하다.
		- 변수 이름의 첫 글자는 숫자로 시작될 수 없다.
		- 대/소문자를 엄격하게 구별하므로 오타에 주의해야한다.
			-> userName / UserName
		- 자바에서 사용하는 예약어(키워드)를 사용 할 수 없다.
		- myName, my_phone, user_input, userPassword
		- 클래스 이름의 명명 규칙도 변수 이름 규칙과 동일하다.
	
	3-9. 값의 할당 방법
		- boolean은 true 참, false 거짓 중의 한 가지만 갖는다.
			- boolean isKorean = true;
		- char는 홀 따옴표(')로 감싸진 한 글자만 대입할 수 있다.
			- char first = '이';
		- long, float, double은 다른 데이터 형과의 구별을 위해 값 뒤에 데이터 형의 첫 글자를 접미사로 가질 수 있다. 접미사는 대/소문자를 가리지 않지만 가급적 대문자로 사용하는 것이 좋다.
			long mondy = 50000L;
			float pi = 3.14F;
			double lat = 128.32D;






