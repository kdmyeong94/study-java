 1. 변수의 범위
	1-1. 변수의 범위 (= 변수의 스코프)
		- 자기 자신보다 하위 블록으로는 침투 할 수 있다.
		
		 int num = 100;
		 if( num == 100){
			//num 이 현재 블록의 바깥에서 선언되었으므로 유효하다.
			System.out.println(num);
		 }
              ------------------------------------------------	
		 int num = 100;
		 for(int i = 0; i<10; i++){
			// 변수num이 현재 블록 밖에서 생성되었으므로 사용가능
			System.out.println(num + i);
		 }

		- 자신이 선언된 블록 밖으로는 빠져나갈 수 없다.

		 int num = 100;
		 if ( num == 100){
			int result = num+100;
		 }
		 // 변수 result가 if 블록 안에서 생성되었으므로 사용 불가
		 System.out.println( result);
		-----------------------------------------
		 for( int i = 0 ; i < 10 ; i++){
			...
		 }
		 // i가 for 문을 위한 괄호 안에서 사용되었으므로 사용 불가
		 System.out.println( i );

		- 블록 안에서 선언된 변수는 블록 밖에서 존재하는 동일한 이름의 변수와는 이름만 동일할 뿐, 다른 값으로 인식된다.

		 int target = 100;
		 if ( target ==100){
		 	int num = target + 100;
		 } else ( 
			int num = target - 100;
		 }

 2. 반복문에서의 break, continue
	- break : 반복문 안에서 break 키워드를 만나면 반복을 강제로 종료한다.
	- continue : 실행흐름의 증감식으로 강제 이동한다.
	
 3. 배열
	3-1. 배열이란?
	 - 변수를 그룹으로 묶은 형태의 한 종류로서, 사물함 같은 형태를 갖고있다.
	 - 하나의 배열 안에는 같은 종류(데이터 형) 의 값들만 저장 될 수 있다.

	3-2. 배열 만드는 방법
	 - 배열의 선언
		데이터형[]배열이름;
	 - 배열의 생성 - 변수를 저장 할 수 있는 사물함을 생성
		배열 이름 = new 데이터형[크기];
	 - 배열 생성의 예
		 int[] grade; 	// 여러개의 int형 변수를 저장 할 수 있는 배열의 선언
		 grade = new int[3];  // 배열의 칸을 3칸으로 할당

	 - 배열 선언과 크기 지정에 대한 일괄처리
		 데이터형[] 배열이름 = new 데이터형[3];
	
	 - 배열의 모양
		생성된 배열은 사물함과 같이 각각의 칸에 값들이 저장되고, 각각의 칸은 0부터 일련번호가 지정된다. ( 일련번호 = 배열의 인덱스)

	 - 데이터 할당
		- 배열은 값을 저장할 수 있는 공간일 뿐, 그 자체가 값은 아니다.
		- 값이 대입되지 않은 경우, 숫자형은 0 boolean형은 false가 자동으로 대입된다.
		- 배열안에 값을 저장하기 위해서는 인덱스 번호를 사용하여 각각의 칸에 직접 값을 대입해야 한다.


		배열이름[인덱스] = 값; 

		int[] grade = new int[3];
		grade[0] = 75;
		grade[1] = 85;
		grade[2] = 91;

	- 배열의 크기 설정과 값 할당에 대한 일괄처리
		- 배열의 크기를 지정하면서 괄호 "{...}"안에 배열에 포함될 각 항목들을 콤마 (,)로 나열하면, 배열에 생성과 값의 할당을 일괄처리 할 수 있다. 이 때 배열의 크기를 별도로 지정하지 않으며, 'new 데이터형[]' 이 부분은 생략이 가능하다.

		데이터형[] 배열이름 = new 데이터형[]{값1,값2,...,값n};

		데이터형[] 배열이름 = {값1,값2,...,값n};

	- 배열 값 사용하기
		- 배열 안에 저장되어 있는 값들을 사용하여 연산이나 출력 등의 처리를 위해서는 배열에 부여된 인덱스 값을 통해서 데이터에 접근해야 한다.

		System.out.println(grade[0]);   //75
		System.out.println(grade[1]);   //85
		System.out.println(grade[2]);   //91

	- 배열과 반복문
		- 배열의 특성 : 0 ~ (배열의 크기 - 1)만큼의 인덱스 값을 순차적으로 갖는다.
		- 특성을 활용한 배열 데이터 처리 : 일정 범위를 갖고 순차적으로 증가하는 인덱스 값의 특성을 활용하면 반복문 안에서 배열의 값을 할당하거나, 할당된 값을 읽어들이는 처리가 가능하다.
		
		int[] grade = new int[]{100, 100, 90};
		for(int i = 0 ; i < 3 ; i++ ){ 
			System.out.println(grade[i]);
		}

	- 배열의 크기(길이)
		- 배열의 길이를 얻기 위해서는 "배열이름.length"형식으로 접근한다.
		- grade라는 배열을 생성한 경우 배열의 길이
			int size = grade.length;

		- 배열의 길이값은 주로 반복문의 조건식에서 반복의 범위를 지정하기 위하여 사용된다.








